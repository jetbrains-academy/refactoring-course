type: edu
custom_name: Apply Pull Up and Push Down refactorings
files:
- name: test/Tests.kt
  visible: false
- name: src/main/kotlin/jetbrains/refactoring/course/moving/controller/PlayerController.kt
  visible: true
  placeholders:
  - offset: 0
    length: 478
    placeholder_text: |-
      package jetbrains.refactoring.course.moving.controller

      import jetbrains.refactoring.course.moving.model.Player
      import jetbrains.refactoring.course.moving.utils.Vector2

      abstract class PlayerController(val speed: Int, val player: Player, private val screenSize: Vector2) : Controller(speed, player) {

          abstract fun getDirection(): Vector2

      }

- name: src/main/kotlin/jetbrains/refactoring/course/moving/utils/Vector2.kt
  visible: true
- name: src/main/kotlin/jetbrains/refactoring/course/moving/controller/MousePlayerController.kt
  visible: true
  placeholders:
  - offset: 0
    length: 844
    placeholder_text: |-
      package jetbrains.refactoring.course.moving.controller

      import jetbrains.refactoring.course.moving.model.Player
      import jetbrains.refactoring.course.moving.utils.Vector2
      import java.awt.MouseInfo

      class MousePlayerController(speed: Int, player: Player, private val screenSize: Vector2) :
          PlayerController(speed, player, screenSize) {

          override fun getDirection(): Vector2 {
              throw NotImplementedError()
          }

          override fun move() {
              val centerW = screenSize.x / 2
              val centerH = screenSize.y / 2
              val location = MouseInfo.getPointerInfo().location
              val directionX = when {
                  location.x > centerW -> 1
                  location.x < centerW -> -1
                  else -> 0
              }
              val directionY = when {
                  location.y > centerH -> 1
                  location.y < centerH -> -1
                  else -> 0
              }
              player.position += Vector2(directionX * speed, directionY * speed)
          }
      }

- name: src/main/kotlin/jetbrains/refactoring/course/moving/controller/KeyboardPlayerController.kt
  visible: true
  placeholders:
  - offset: 0
    length: 716
    placeholder_text: |-
      package jetbrains.refactoring.course.moving.controller

      import jetbrains.refactoring.course.moving.model.Player
      import jetbrains.refactoring.course.moving.utils.Context
      import jetbrains.refactoring.course.moving.utils.Vector2

      class KeyboardPlayerController(speed: Int, player: Player, private val context: Context, screenSize: Vector2) :
          PlayerController(speed, player, screenSize) {

          override fun getDirection(): Vector2 {
              throw NotImplementedError()
          }

          override fun move() {
              val direction = Vector2(0, 0)
              if (context.pressedKeys.contains("w")) direction.y--
              if (context.pressedKeys.contains("a")) direction.x--
              if (context.pressedKeys.contains("s")) direction.y++
              if (context.pressedKeys.contains("d")) direction.x++
              player.position += Vector2(direction.x * speed, direction.y * speed)
          }
      }

- name: src/main/kotlin/jetbrains/refactoring/course/moving/utils/Context.kt
  visible: true
- name: test/GameClass.kt
  visible: false
- name: src/main/kotlin/jetbrains/refactoring/course/moving/model/Character.kt
  visible: true
  placeholders:
    - offset: 0
      length: 642
      placeholder_text: |-
        package jetbrains.refactoring.course.moving.model
  
        import jetbrains.refactoring.course.moving.utils.Vector2
      
        abstract class Character(var position: Vector2) {
          
          abstract val experience: Int
          abstract val damage: Int
          abstract var health: Int
          
          val isDead: Boolean
            get() = health <= 0
          
          abstract fun attack(character: Character)
          
          abstract fun beAttacked(character: Character)
        }

- name: src/main/kotlin/jetbrains/refactoring/course/moving/model/Enemy.kt
  visible: true
  placeholders:
    - offset: 0
      length: 294
      placeholder_text: |-
        package jetbrains.refactoring.course.moving.controller
  
        import jetbrains.refactoring.course.moving.model.Enemy

        class EnemyController(private val speed: Int, private val enemy: Enemy) : Controller(speed, enemy)

- name: src/main/kotlin/jetbrains/refactoring/course/moving/model/Player.kt
  visible: true
  placeholders:
    - offset: 0
      length: 379
      placeholder_text: |-
        package jetbrains.refactoring.course.moving.model
  
        import jetbrains.refactoring.course.moving.utils.Vector2
      
        class Player(position: Vector2) : Character(position) {
                                            
          companion object {
            private const val DEFAULT = 10
            private const val maxHealth = 100
          }
                                            
          override var health: Int = maxHealth
          val armor: Int = DEFAULT
          override val damage: Int = DEFAULT
          override var experience: Int = 0
          
          override fun attack(character: Character) {
            character.beAttacked(this)
            if (character.isDead) {
              experience += character.experience
            }
          }
                                            
          override fun beAttacked(character: Character) {
            health = (health - character.damage * (1 - 0.06 * armor / (1 + 0.06 * armor))).toInt()
          }
        }

- name: src/main/kotlin/jetbrains/refactoring/course/moving/controller/Controller.kt
  visible: true
  placeholders:
    - offset: 0
      length: 230
      placeholder_text: |-
        package jetbrains.refactoring.course.moving.controller
  
        import jetbrains.refactoring.course.moving.model.Character
        import jetbrains.refactoring.course.moving.utils.Vector2
        import kotlin.random.Random
      
        abstract class Controller(private val speed: Int, private val character: Character) {
                                                                                   
          open fun move() {
            val random = Random(0)
            val dx = ((random.nextInt() % 2) * 2 - 1) * speed
            val dy = ((random.nextInt() % 2) * 2 - 1) * speed
            character.position += Vector2(dx, dy)
          }
        }

- name: src/main/kotlin/jetbrains/refactoring/course/moving/controller/EnemyController.kt
  visible: true
  placeholders:
    - offset: 0
      length: 523
      placeholder_text: |-
        package jetbrains.refactoring.course.moving.model
  
        import jetbrains.refactoring.course.moving.utils.Vector2
      
        class Enemy(position: Vector2) : Character(position) {
                                         
          companion object {
            private const val DEFAULT = 10
            private const val maxHealth = 100
          }
                                           
          override var health: Int = maxHealth
          val armor: Int = DEFAULT
          override val damage: Int = DEFAULT
          override var experience: Int = 5
                                           
          override fun attack(character: Character) {
            character.beAttacked(this)
          }
                                           
          override fun beAttacked(character: Character) {
            health = (health - character.damage * (1 - 0.06 * armor / (1 + 0.06 * armor))).toInt()
          }
        }
